#!/bin/sh
executable=./brainfuck
test_dir=./tests
[ -x ./brainfuck ] || { printf 'No %s executable available\n' "$executable" >&2; exit 1; }

diff=diff
command -v colordiff >/dev/null && diff=colordiff

cleanup() {
    rm -f -- "$output"
}
output=
trap cleanup EXIT
trap 'exit 1' INT HUP TERM PIPE
output=$(mktemp) || exit

# Writes to global "reason"
test_file() {
    local script expected
    script=$1 expected=$2
    shift 2

    "$executable" "$@" "$script" >"$output" || { reason=error; return 2; }
    cmp -s "$output" "$expected" || { reason=fail; return 1; }
    reason=OK
    return 0
}

# Writes to global "failures", "count"
test_and_compare() {
    local script expected
    script=$1 expected=$2 why=$3
    shift 3

    test_file "$script" "$expected" "$@" || failed=true
    printf '%s %20s: %s\n' "$why" "${f#"$test_dir"/}" "$reason"

    if $failed; then
        failures=$((failures + 1))
        echo 'Difference between expected and actual output:'
        "$diff" -u "$expected" "$output"
    fi

    count=$((count + 1))
}

count=0 failures=0
for f in "$test_dir"/*.bf; do
    failed=false

    expected=${f%.bf}.out
    [ -e "$expected" ] && test_and_compare "$f" "$expected" RUN

    expected=${f%.bf}.ast
    [ -e "$expected" ] && test_and_compare "$f" "$expected" AST --no-execute --dump-tree

    expected=${f%.bf}.ops
    [ -e "$expected" ] && test_and_compare "$f" "$expected" OPS --no-execute --dump-opcodes
done

if [ "$failures" -eq 0 ]; then
    printf 'All passed, out of %s tests.\n' "$count"
    exit 0
else
    printf '%s of %s tests failed.\n' "$failures" "$count"
    exit 1
fi
